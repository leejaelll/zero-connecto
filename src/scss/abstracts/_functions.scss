@use "sass:math";
@use "sass:map";
@use "sass:meta";
@use "variables/colors" as *;

// -------------------------------------------------------------------------
//  Type Utility Function

@function is-type($data) {
  @return meta.type-of($data);
}
@function fn() {
  @return null;
}

@function is-function($function-name) {
  @return is-type(meta.get-function($function-name));
}

@function is-number($data) {
  @return is-type($data) == "number";
}

@function is-string($data) {
  @return is-type($data) == "string";
}

@function is-bool($data) {
  @return is-type($data) == "bool";
}

@function is-color($data) {
  @return is-type($data) == "color";
}

// -------------------------------------------------------------------------

// -------------------------------------------------------------------------
// Color Get Function

@function get-color($map, $level) {
  @return map.get($map, $level);
}

@function get-red($level) {
  @return get-color($red, $level);
}
@function get-gray($level) {
  @return get-color($gray, $level);
}
@function get-blue($level) {
  @return get-color($blue, $level);
}
@function get-green($level) {
  @return get-color($green, $level);
}
// -------------------------------------------------------------------------

// -------------------------------------------------------------------------
// Units

@function get-unit($value) {
  @return math.unit($value);
}

@function has-unit($value) {
  @return get-unit($value) != "";
}

// 단위 제거
@function remove-unit($unit) {
  @return math.div($unit, $unit * 0 + 1);
}

@function get-base-rem-size-percentage($base-px-size) {
  @return math.div(remove-unit($base-px-size), 16) * 100%;
}

@function rem($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1rem;
}

@function em($unit, $base: 16) {
  @return math.div(remove-unit($unit), remove-unit($base)) * 1em;
}

// -------------------------------------------------------------------------

// -------------------------------------------------------------------------
// Math

@function get-random($n) {
  @return math.round(math.random() * remove-unit($n));
}

@debug get-random(10);

@function get-random-min-max($min: 0, $max: 100) {
  @return get-random($max - $min) + $min;
}
// get-random-min-max($max:100) -> 키워드만 호출 가능

// -------------------------------------------------------------------------
// While
// $i: 10;
// @while $i > 0 {
//   $i: $i - 2;
//   @debug $i;
// }

@mixin makeColorUtils($name, $props: color) {
  // @each $key, $value in $red {
  //   .#{$red}-#{$key} {
  //     #{$prop}: $value;
  //   }
  // }

  $color-data: map.get($colors, $name);
  @debug $color-data;
}

@include makeColorUtils(red);
